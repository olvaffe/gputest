#version 460 core

/*
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: MIT
 */

#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(local_size_x = 64) in;

layout(set = 0, binding = 0) uniform textureBuffer src;

layout(set = 0, binding = 1) buffer DST {
    vec4 data[];
} dst;

layout(set = 0, binding = 2) readonly buffer WEIGHTS {
    mat4 data[];
} weights;

layout(push_constant) uniform CONSTS {
    uint width;
    uint slice;

    uint kernel_width;
    uint kernel_height;
} consts;

void
main()
{
    const uint bx = gl_GlobalInvocationID.x;
    const uint by = gl_GlobalInvocationID.y;

    vec4 dst_val = vec4(0.0);

    for (uint ky = 0; ky < consts.kernel_height; ky++) {
        for (uint kx = 0; kx < consts.kernel_width; kx++) {
            for (uint ks = 0; ks < consts.slice; ks++) {
                const uint src_coord =
                    ((by + ky) * consts.width + (bx + kx)) * consts.slice + ks;
                const uint weight_coord =
                    (ky * consts.kernel_width + kx) * consts.slice + ks;

                const vec4 src_val = texelFetch(src, int(src_coord));
                const mat4 weight = weights.data[weight_coord];

                dst_val += weight * src_val;
            }
        }
    }

    const uint dst_coord = by * consts.width + bx;
    dst.data[dst_coord] = dst_val;
}
