#version 460 core

/*
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: MIT
 */

#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(local_size_x = 64) in;

layout(set = 0, binding = 0) buffer DST {
    float16_t data[];
} dst;

layout(push_constant) uniform CONSTS {
    uint repeat;
} consts;

void main()
{
    const uint idx = gl_GlobalInvocationID.x;
    const float16_t src_val1 = float16_t(idx);
    const float16_t src_val2 = float16_t(idx + 1);

    float16_t dst_val = float16_t(0);
#if 1
    [[dont_unroll]] for (uint i = 0; i < consts.repeat; i++) {
        dst_val += src_val1 * src_val2;
    }
#else
    /* When consts.repeat is known positive (e.g., a fixed value rather
     * than a push constant), llvm optimizes the for-loop above into this
     * to save one check.  But this confuses Mesa's opt_split_alu_of_phi.
     */
    const uint repeat = 100;
    int i = 0;
    [[dont_unroll]] do {
        int j = i + 1;
        dst_val += src_val1 * src_val2;
        if (i >= repeat - 1)
            break;
        i = j;
    } while (true);
#endif

    dst.data[idx] = dst_val;
}
